generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String     @id @default(uuid())
  email     String     @unique
  password  String
  username  String
  company   String?
  role      String?
  verifiedAt DateTime?
  projects  Project[]
  posts     Post[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  JWTToken  JWTToken[]
}

model JWTToken {
  userId     String
  token      String  @id
  expiredAt  DateTime
  used       Boolean? @default(false)
  destroyed  Boolean? @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model ForgetPassword {
  token      String   @id @default(uuid())
  email      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expiredAt DateTime
}
enum ProjectType {
  BLOG
  ECOMMERCE
  SITE
  OTHER
}

model Project {
  id        String     @id @default(uuid())
  shortUrl   String     @unique
  name        String
  userId      String
  type ProjectType? @default(BLOG)
  private     Boolean @default(false)
  categories  Category[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])

}

model Category {
  id        String   @id @default(uuid())
  slug        String   @unique
  name        String
  projectId   String
  description String?
  cover       String?
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])
}

enum State {
  PUBLISHED
  DRAFT
  ARCHIVED
}

model Post {
  id      String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String
  slug      String    @unique
  content   String
  cover     String?
  state     State     @default(DRAFT)
  comments  Comment[]

  // relation field
  authorId   String?
  categoryId String
  author     User?    @relation(fields: [authorId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
}

model Comment {
  id      String   @id @default(uuid())
  name      String
  postId    String
  message   String
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
}
